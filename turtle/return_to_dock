function receiveDefenseSignal(orientation)
    SERVER_ID = 0
    local cur_x, cur_y, cur_z = gps.locate(2)
    while not x do
        cur_x, cur_y, cur_z = gps.locate(2)
    end
    local coord_message = {cur_x, cur_y, cur_z}
    print("gps success: "..tostring(cur_x)..", "..tostring(cur_y)..", "..tostring(cur_z))
    rednet.send(SERVER_ID, coord_message)
    local new_x, new_y, new_z = getNewCoords()
    print("new coords ascertained: "..tostring(new_x)..", "..tostring(new_y)..", "..tostring(new_z))
    rednet.send(SERVER_ID, "new coord confirm")
    while not cur_z == new_z do
        if (cur_z > new_z) then
            turtle.down()
        else
            turtle.up()
        end --if else
    end --while -> new z acquired
    print("new z acquired")
    --local orientation = orientSelf()  --already oriented via passed param
    while not({cur_x, cur_y} == {new_x, new_y}) do
        local new_coords
        new_coords, orientation = closeLargestGap({{cur_x, cur_y}, {new_x, new_y}}, orientation)
        cur_x, cur_y = new_coords
    end
    print("reached dock")
    rednet.send(SERVER_ID, "final confirm")
    local event, id, message, dist = os.pullEvent("rednet_message")
    if (message == "acknowledge") then
        print("received acknowledge")
        turtle.refuel()
    else
        print("unexpected message: "..tostring(message))

end

function getNewCoords()
    local dest_coords
    local event, id, message, dist = 
        os.pullEvent("rednet_message")
    if type(message) == "table" then
        dest_coords = message
    end
    return dest_coords

end

function orientSelf() --returns string of current orientation or false if failed

    local old_x, old_y, old_z = gps.locate(2)
    local success = turtle.forward()
    while not success do
        turtle.turnRight()
        success = turtle.forward()
    end
    local new_x, new_y, new_z = gps.locate(2)
    if new_x > old_x then
        return "+x"
    elseif new_x < old_x then
        return "-x"
    elseif new_y > old_y then
        return "+y"
    elseif new_y < old_y then
        return "-y"
    else
        print("failed to orient")
        return false

end

function oturn(direction , orientation) --turns turtle, changes tracked orientation
    --returns new orientation or false
    --prints on error
    local success
    local pos_x, neg_x, pos_y, neg_y = "+x", "-x", "+y", "-y"
    local otable = {
        [pos_x] = {neg_y, pos_y},
        [neg_x] = {pos_y, neg_y},
        [pos_y] = {pos_x, neg_x},
        [neg_y] = {neg_x, pos_x}}
    local oindex


    if direction == "left" then
        success = turtle.turnLeft()
        oindex = 1
    elseif direction == "right" then
        success == turtle.turnRight()
        oindex = 2
    elseif not direction then
        print("failed oturn - direction: "..tostring(direction).." orientation: "..tostring(orientation))
        return false
    end
    orientation = otable[orientation][oindex]
    if not orientation then
        print("failed oturn - direction: "..tostring(direction).." orientation: "..tostring(orientation))
    end
    return orientation

end

function closeLargestGap(positions, orientation) --finds largest diff in coords and closes gap
    --returns {new coords, new orientation}
    --prints on error

    local cur_pos, new_pos = positions
    local cur_x, cur_y = cur_pos
    local new_x, new_y = new_pos
    local new_orientation = orientation

    local x_diff = new_x - cur_x
    local y_diff = new_y - cur_y

    local pos_x, neg_x, pos_y, neg_y = "+x", "-x", "+y", "-y" --might have to convert to table list

    local moveTable = {
        pos_x = {pos_x = turtle.forward(), neg_y = function() new_orientation = oturn("left", new_orientation) return (new_orientation and true) end, pos_y = function() new_orientation = oturn("right", new_orientation) return (new_orientation and true) end, neg_x = turtle.back()},
        neg_x = {neg_x = turtle.forward(), pos_y = function() new_orientation = oturn("left", new_orientation) return (new_orientation and true) end, neg_y = function() new_orientation = oturn("right", new_orientation) return (new_orientation and true) end, pos_x = turtle.back()},
        pos_y = {pos_y = turtle.forward(), pos_x = function() new_orientation = oturn("left", new_orientation) return (new_orientation and true) end, nex_x = function() new_orientation = oturn("right", new_orientation) return (new_orientation and true) end, neg_y = turtle.back()},
        neg_y = {neg_y = turtle.forward(), neg_x = function() new_orientation = oturn("left", new_orientation) return (new_orientation and true) end, pos_x = function() new_orientation = oturn("right", new_orientation) return (new_orientation and true) end, pos_y = turtle.back()},
    }

    local dest_orientation

    local largest_gap = math.max(math.abs(x_diff), math.abs(y_diff))

    if (largest_gap == math.abs(x_diff)) then
        if (x_diff > SERVER_ID) then
            dest_orientation = pos_x
        else
            dest_orientation = neg_x
        end
    else --largest gap is in y direction
        if (y_diff > SERVER_ID) then
            dest_orientation = pos_y
        else
            dest_orientation = neg_y
        end

    end

    for i=largest_gap, 1, -1 do
        local status = false
        local j = 5
        while not status or j >= 1 do
            status = moveTable[new_orientation][dest_orientation]
            if (j == 1) then
                print("failed to close largest gap - unable to move toward home")
                return false
        end
    end

    local cur_z
    cur_x, cur_y, cur_z = gps.locate(2)

    return {{cur_x, cur_y}, new_orientation}

end
