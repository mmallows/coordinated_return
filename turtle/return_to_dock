function receiveDefenseSignal(orientation)
    SERVER_ID = 0
    local cur_x, cur_y, cur_z = gps.locate(2)
    while not x do
        cur_x, cur_y, cur_z = gps.locate(2)
    end
    local coord_message = {"current coords", {cur_x, cur_y, cur_z}}
    print("gps success: "..tostring(cur_x)..", "..tostring(cur_y)..", "..tostring(cur_z))
    rednet.send(SERVER_ID, coord_message)
    local new_x, new_y, new_z = getNewCoords()
    print("new coords ascertained: "..tostring(new_x)..", "..tostring(new_y)..", "..tostring(new_z))
    rednet.send(SERVER_ID, "new coord confirm")
    
    --local orientation = orientSelf()  --already oriented via passed param
    while not({cur_x, cur_y, cur_z} == {new_x, new_y, new_z}) do
        local new_coords
        new_coords, orientation = traverseAxis({{cur_x, cur_y, cur_z}, {new_x, new_y, new_z}}, orientation)
        if new_coords then
            cur_x, cur_y, cur_z = new_coords
        else
    end
    print("reached dock")
    rednet.send(SERVER_ID, "final confirm")
    local event, id, message, dist = os.pullEvent("rednet_message")
    if (message == "acknowledge") then
        print("received acknowledge")
        turtle.refuel()
    else
        print("unexpected message: "..tostring(message))

end

function getNewCoords()
    local dest_coords
    local event, id, message, dist = 
        os.pullEvent("rednet_message")
    if type(message) == "table" then
        dest_coords = message
    end
    return dest_coords

end

function orientSelf() --returns string of current orientation or false if failed

    local old_x, old_y, old_z = gps.locate(2)
    local success = turtle.forward()
    while not success do
        turtle.turnRight()
        success = turtle.forward()
    end
    local new_x, new_y, new_z = gps.locate(2)
    if new_x > old_x then
        return "+x"
    elseif new_x < old_x then
        return "-x"
    elseif new_y > old_y then
        return "+y"
    elseif new_y < old_y then
        return "-y"
    else
        print("failed to orient")
        return false

end

function oturn(orientation, direction) --turns turtle, changes tracked orientation
    --returns new orientation or false
    --prints on error
    local success
    local pos_x, neg_x, pos_y, neg_y = "+x", "-x", "+y", "-y"
    local otable = {
        [pos_x] = {neg_y, pos_y},
        [neg_x] = {pos_y, neg_y},
        [pos_y] = {pos_x, neg_x},
        [neg_y] = {neg_x, pos_x}}
    local oindex

    if direction == "left" then
        success = turtle.turnLeft()
        oindex = 1
    elseif direction == "right" then
        success = turtle.turnRight()
        oindex = 2
    elseif not direction then
        print("failed oturn - direction: "..tostring(direction).." orientation: "..tostring(orientation))
        return false
    end
    if success then 
        orientation = otable[orientation][oindex]
    else
        print("failed to turn - x,y,z="..)
    if not orientation then
        print("failed oturn - direction: "..tostring(direction).." orientation: "..tostring(orientation))
    end
    return orientation

end

function traverseAxis(coordinates, orientation, axis) --finds largest diff in coords and closes gap
    --returns {new coords, new orientation}
    --prints on error

    local cur_pos, dest_pos = coordinates
    local cur_x, cur_y, cur_z = cur_pos
    local dest_x, dest_y, dest_z = dest_pos

    local x_diff = dest_x - cur_x
    local y_diff = dest_y - cur_y
    local z_diff = dest_z - cur_z

    local pos_x, neg_x, pos_y, neg_y, pos_z, neg_z = "+x", "-x", "+y", "-y", "+z", "-z" --might have to convert to table list

    local moveTable = { --index into as moveTable[current_direction][dest_direction]
        pos_x = {pos_x = turtle_forward(orientation), 
            neg_y = turtle_turn(orientation, "left"), 
            pos_y = turtle_turn(orientation, "right"), 
            neg_x = turtle_back(orientation),
            pos_z = turtle_up(),
            neg_z = turtle_down()},
        neg_x = {neg_x = turtle_forward(orientation), 
            pos_y = turtle_turn(orientation, "left"), 
            neg_y = turtle_turn(orientation, "right"), 
            pos_x = turtle_back(orientation),
            pos_z = turtle_up(),
            neg_z = turtle_down()},
        pos_y = {pos_y = turtle_forward(orientation), 
            pos_x = turtle_turn(orientation, "left"), 
            neg_x = turtle_turn(orientation, "right"), 
            neg_y = turtle_back(orientation),
            pos_z = turtle_up(),
            neg_z = turtle_down()},
        neg_y = {neg_y = turtle_forward(orientation), 
            neg_x = turtle_turn(orientation, "left"), 
            pos_x = turtle_turn(orientation, "right"), 
            pos_y = turtle_back(orientation),
            pos_z = turtle_up(),
            neg_z = turtle_down()},
    }

    local dest_direction

    local largest_gap = math.max(math.abs(x_diff), math.abs(y_diff), math.abs(z_diff))

    if (largest_gap == math.abs(x_diff)) then
        if (x_diff > 0) then
            dest_direction = pos_x
        else
            dest_direction = neg_x
        end
    elseif (largest_gap == math.abs(y_diff)) --largest gap is in y direction
        if (y_diff > 0) then
            dest_direction = pos_y
        else
            dest_direction = neg_y
        end

    end

    for i=largest_gap, 1, -1 do
        local status = false
        local j = 5
        while not status or j >= 1 do
            status = moveTable[orientation][dest_direction]
            if (j == 1) then
                print("failed to close largest gap - unable to move toward home")
                return false
        end
    end

    --cur_x, cur_y, cur_z = gps.locate(2)

    return {{cur_x, cur_y, cur_z}, orientation}

    function turtle_forward(orientation)
        local coord_change_table = {
            pos_x = function() cur_x = cur_x + 1 end,
            neg_x = function() cur_x = cur_x - 1 end,
            pos_y = function() cur_y = cur_y + 1 end,
            neg_y = function() cur_y = cur_y - 1 end,
        }
        local success = turtle.forward()
        if success then coord_change_table[orientation] end
        return success
    end
    function turtle_turn(orientation, turn_direction)
        local orientation = oturn(orientation, turn_direction)
        return orientation and true --checks success of turn
    end
    function turtle_back(orientation)
        local coord_change_table = {
            pos_x = function() cur_x = cur_x - 1 end,
            neg_x = function() cur_x = cur_x + 1 end,
            pos_y = function() cur_y = cur_y - 1 end,
            neg_y = function() cur_y = cur_y + 1 end,
        }
        local success = turtle.back()
        if success then coord_change_table[orientation] end
        return success
    end
    function turtle_up()
        local success = turtle.up()
        if success then cur_z = cur_z + 1 end
        return success
    end
    function turtle_down()
        local success = turtle.down()
        if success then cur_z = cur_z - 1 end
    end

end
